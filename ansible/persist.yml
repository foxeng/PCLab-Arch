---
- name: Clear pacman cache
  ansible.builtin.shell: yes | pacman -Scc
  tags:
  - cleanup

- name: Make changes permanent
  block:
  - name: Persist home
    block:
    - name: Ensure no ansible traces left in home
      ansible.builtin.file:
        path: /home/labuser/.ansible
        state: absent
    - name: Delete old home snapshot
      ansible.builtin.command: rec-sub-del.sh home-snap /root/btrfs-root
    - name: Create home snapshot from current
      ansible.builtin.command: btrfs subvolume snapshot /root/btrfs-root/home /root/btrfs-root/home-snap
    tags:
    - home
  - name: Persist root state
    ansible.builtin.command: replace-snap.sh
    tags:
    - root
  - name: Generate GRUB configuration
    # NOTE: This needs to happen after the above
    block:
    - name: Ensure /etc/grub.d/30_uefi-firmware is missing
      # NOTE: This file (part of grub) adds a boot menu option to reboot into
      # the UEFI firmware settings, which we don't want. The file will be
      # reinstalled every time GRUB is upgraded, so removing it only once is not
      # enough. Also, no reason bothering to keep a backup.
      ansible.builtin.file:
        path: /etc/grub.d/30_uefi-firmware
        state: absent
    - name: Generate grub.cfg
      # TODO: If Windows can be detected without mounting, replace with a simple
      # 'grub-mkconfig -o /boot/grub/grub.cfg'
      ansible.builtin.shell: |
        # All currently unmounted ntfs partitions
        parts=$(lsblk --noheadings --list --output NAME,FSTYPE,MOUNTPOINT \
          | awk 'NF == 2 && $2 == "ntfs" { print $1 }')

        echo "${parts}"

        mountbasedir=/mnt/update-grub
        mkdir -p ${mountbasedir}
        for part in ${parts}; do
          mountpoint=${mountbasedir}/${part}
          echo "${mountpoint}"

          mkdir -p ${mountpoint}
          mount /dev/${part} ${mountpoint}
        done

        grub-mkconfig -o /boot/grub/grub.cfg

        for part in ${parts}; do
          mountpoint=${mountbasedir}/${part}

          umount ${mountpoint}
          rmdir ${mountpoint}
        done
        rmdir ${mountbasedir}
    tags:
    - grub
  tags: persist
